import { useState, useRef, useEffect, useCallback, useMemo } from 'react';
import ReactMarkdown from 'react-markdown';
import remarkMath from 'remark-math';
import remarkGfm from 'remark-gfm';
import rehypeHighlight from 'rehype-highlight';
import rehypeKatex from 'rehype-katex';
import 'katex/dist/katex.min.css';
import 'highlight.js/styles/atom-one-dark.css';
import { useParams } from "react-router-dom";

import TopIntro from '../components/TopIntro';
import { getLangIcon, extractText, speakText } from '../services/handle/Function';
// Tu·ª≥ ch·ªçn: n·∫øu mu·ªën gi·ªØ l∆∞·ªõi an to√†n FE cho LaTeX (d√π BE ƒë√£ chu·∫©n), b·∫≠t d√≤ng d∆∞·ªõi:
// import { transformLatexDelimiters } from '../services/latex';
const API_URL = process.env.REACT_APP_API_URL || '';

function Home() {
  const [input, setInput] = useState('');
  const [chatHistory, setChatHistory] = useState(() => {
    try {
      return JSON.parse(sessionStorage.getItem('chatHistory')) || [];
    } catch {
      return [];
    }
  });
  const { sessionId: urlSessionId } = useParams();
  const [sessionId, setSessionId] = useState(() => sessionStorage.getItem('sessionId') || null);// l·∫•y sessionId t·ª´ URL
  const [loading, setLoading] = useState(false);
  const [copied, setCopied] = useState(false);
  const [remainingCredit, setRemainingCredit] = useState(null);
  const [errorMessage, setErrorMessage] = useState('');
  const [showLoginModal, setShowLoginModal] = useState(false);

  const started = chatHistory.length > 0;
  const assistantMessageRef = useRef({ role: 'assistant', content: '' });
  const controllerRef = useRef(null);
  const listEndRef = useRef(null);

  // Persist history 1 l·∫ßn khi thay ƒë·ªïi (tr√°nh sessionStorage m·ªói chunk)
  useEffect(() => {
    sessionStorage.setItem('chatHistory', JSON.stringify(chatHistory));
  }, [chatHistory]);

  // Auto scroll khi c√≥ message m·ªõi
  useEffect(() => {
    if (listEndRef.current) {
      listEndRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });
    }
  }, [chatHistory, loading]);

  // Ki·ªÉm tra login
  const token = localStorage.getItem("token");
  useEffect(() => {
    if (!token) {
      setShowLoginModal(true);
    }
  }, [token]);

  // T·∫£i s·ªë credit ban ƒë·∫ßu
  useEffect(() => {
    const fetchInitialCredit = async () => {
      if (!token) return;
      try {
        const res = await fetch(`${API_URL}/user/credits`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        if (!res.ok) {
          const data = await res.json();
          throw new Error(data.message || "Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin credit");
        }
        const data = await res.json();
        if (data.credit !== undefined) {
          setRemainingCredit(data.credit);
        } else if (data.error) {
          setErrorMessage(data.message || "Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin credit");
        }
      } catch (err) {
        console.error("Fetch credit error:", err);
        setErrorMessage(err.message || "Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin credit. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    };
    fetchInitialCredit();
  }, [token, API_URL]);

  // T·∫£i l·ªãch s·ª≠ chat
  const loadSession = useCallback(async (sid) => {
    if (!token) return;
    try {
      const res = await fetch(`${API_URL}/conversations/${sid}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      if (!res.ok) throw new Error("Kh√¥ng t·∫£i ƒë∆∞·ª£c l·ªãch s·ª≠");
      const data = await res.json();
      const mapped = data
        .flatMap(log => [
          log.message && { role: "user", content: log.message },
          log.response && { role: "assistant", content: log.response }
        ])
        .filter(m => m && m.content !== "[Session started]");
      // lo·∫°i null
      setChatHistory(mapped);
      setSessionId(sid);
      sessionStorage.setItem("sessionId", sid);
      sessionStorage.setItem("chatHistory", JSON.stringify(mapped));
    } catch (err) {
      console.error("Load session error:", err);
      setErrorMessage("Kh√¥ng t·∫£i ƒë∆∞·ª£c l·ªãch s·ª≠ chat. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  }, [API_URL, token]);

  useEffect(() => {
    if (urlSessionId) {
      loadSession(urlSessionId);
    }
  }, [urlSessionId, loadSession]);

  // Reset khi t·∫°o cu·ªôc tr√≤ chuy·ªán m·ªõi
  useEffect(() => {
    const handleNewChat = () => {
      sessionStorage.removeItem("chatHistory");
      sessionStorage.removeItem("sessionId");
      setChatHistory([]);
      setSessionId(null);
      setInput('');
    };
    window.addEventListener("newChat", handleNewChat);
    return () => window.removeEventListener("newChat", handleNewChat);
  }, []);

  // Helpers
  const handleCopy = useCallback((text) => {
    navigator.clipboard.writeText(text);
    setCopied(true);
    setTimeout(() => setCopied(false), 1200);
  }, []);

  const handleClear = useCallback(async () => {
    if (!window.confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán n√†y?')) return;
    const sid = sessionStorage.getItem('sessionId');
    if (!sid || !token) {
      // Kh√¥ng c√≥ session th√¨ ch·ªâ xo√° local
      sessionStorage.removeItem('chatHistory');
      setChatHistory([]);
      setSessionId(null);
      return;
    }
    try {
      const res = await fetch(`${API_URL}/conversations/${sid}`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${token}` }
      });
      if (!res.ok) throw new Error("X√≥a session th·∫•t b·∫°i");
      // Sau khi xo√° BE th√†nh c√¥ng ‚Üí xo√° local lu√¥n
      sessionStorage.removeItem('chatHistory');
      sessionStorage.removeItem('sessionId');
      setChatHistory([]);
      setSessionId(null);
      setInput('');
      // G·ª≠i s·ª± ki·ªán ƒë·ªÉ sidebar (n·∫øu c√≥) reload l·∫°i danh s√°ch session
      window.dispatchEvent(new Event("sessionUpdated"));
    } catch (err) {
      console.error("Delete session error:", err);
      setErrorMessage("Kh√¥ng x√≥a ƒë∆∞·ª£c cu·ªôc tr√≤ chuy·ªán. Vui l√≤ng th·ª≠ l·∫°i.");
    }
  }, [API_URL, token]);

  //// Math-safe check nh·∫π ƒë·ªÉ gi·∫£m v·ª° c√¥ng th·ª©c (BE ƒë√£ chu·∫©n, FE ch·ªâ l√† l∆∞·ªõi an to√†n)
  const isMathBalanced = (s) => {
    const dollars = (s.match(/(?<!\\)\$/g) || []).length;
    return dollars % 2 === 0;
  };

  // Throttle render khi stream (batch m·ªói ~80ms)
  const scheduleRef = useRef({ timer: null, pending: '' });
  const pushAssistantChunk = useCallback((baseHistory, assistantMsgRef, chunk) => {
    scheduleRef.current.pending += chunk;
    if (scheduleRef.current.timer) return;
    scheduleRef.current.timer = setTimeout(() => {
      const take = scheduleRef.current.pending;
      scheduleRef.current.pending = '';
      scheduleRef.current.timer = null;
      if (!take) return;
      // FE guard: ch·ªâ append khi t∆∞∆°ng ƒë·ªëi an to√†n cho KaTeX
      if (isMathBalanced(take) || /\n|\.\s$/.test(take)) {
        assistantMsgRef.current.content += take;
        const newHistory = [
          ...baseHistory.slice(0, -1),
          baseHistory[baseHistory.length - 1],
          { ...assistantMsgRef.current }
        ];
        setChatHistory(newHistory);
      } else {
        // n·∫øu ch∆∞a ‚Äúan to√†n‚Äù, d·ªìn th√™m v√† ch·ªù batch ti·∫øp theo
        scheduleRef.current.pending = take + scheduleRef.current.pending;
      }
    }, 80);
  }, []);

  const handleSubmit = useCallback(async () => {
    const question = input.trim();
    if (!question || loading || remainingCredit === 0) return;

    const updatedHistory = [...chatHistory, { role: 'user', content: question }];
    setChatHistory(updatedHistory);
    setInput('');
    setLoading(true);
    setErrorMessage('');

    // Chu·∫©n b·ªã stream
    controllerRef.current = new AbortController();
    const signal = controllerRef.current.signal;

    try {
      const token = localStorage.getItem('token');
      // üîπ N·∫øu ch∆∞a c√≥ sessionId th√¨ g·ªçi API ƒë·ªÉ t·∫°o m·ªõi
      let sessionToUse = sessionId;
      if (!sessionToUse) {
        const startRes = await fetch(`${API_URL}/conversations/start`, {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (!startRes.ok) throw new Error("Kh√¥ng t·∫°o ƒë∆∞·ª£c session");
        const startData = await startRes.json(); // S·ª¨A: res ‚Üí startRes
        sessionToUse = startData.sessionId;
        setSessionId(sessionToUse);
        sessionStorage.setItem('sessionId', sessionToUse);
      }
      //  G·ªçi API stream, l·∫ßn n√†y truy·ªÅn ƒë√∫ng sessionId
      const res = await fetch(`${API_URL}/stream`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/x-ndjson',
          'Authorization': `Bearer ${token}`
        },
        cache: 'no-store',
        body: JSON.stringify({ messages: updatedHistory, session_id: sessionToUse }),
        signal
      });

      if (!res.ok || !res.body) throw new Error(`HTTP ${res.status}`);

      const reader = res.body.getReader();
      const decoder = new TextDecoder('utf-8');
      assistantMessageRef.current = { role: 'assistant', content: '' };
      let bufferTail = ''; // ph√≤ng khi c√≥ ph·∫ßn d∆∞ ch∆∞a ‚Äúan to√†n‚Äù

      // ƒê·ªçc NDJSON
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunkStr = decoder.decode(value, { stream: true });
        const lines = chunkStr.split('\n').filter(line => line.trim() !== ''); // Lo·∫°i b·ªè d√≤ng tr·ªëng

        for (const line of lines) {
          let json;
          try {
            if (!line || line === 'undefined') {
              console.warn('D√≤ng NDJSON kh√¥ng h·ª£p l·ªá, b·ªè qua:', line);
              continue;
            }
            json = JSON.parse(line);
          } catch (e) {
            console.error('L·ªói parse NDJSON:', line, e);
            // c√≥ th·ªÉ l√† d√≤ng r√°c do network; gom l·∫°i ƒë·ªÉ l·∫ßn sau parse
            bufferTail += line + '\n';
            continue;
          }

          if (json.type === 'error') {
            setErrorMessage(json.message || 'L·ªói t·ª´ server, vui l√≤ng th·ª≠ l·∫°i');
            setLoading(false);
            break;
          }
          if (json.type === 'done') {
            // flush ph·∫ßn c√≤n l·∫°i
            if (scheduleRef.current.timer) {
              clearTimeout(scheduleRef.current.timer);
              scheduleRef.current.timer = null;
            }
            const rest = scheduleRef.current.pending;
            scheduleRef.current.pending = '';
            assistantMessageRef.current.content += rest;
            const finalHistory = [
              ...updatedHistory.slice(0, -1),
              updatedHistory[updatedHistory.length - 1],
              { ...assistantMessageRef.current }
            ];
            setChatHistory(finalHistory);
            if (json.remainingCredit !== undefined) {
              setRemainingCredit(json.remainingCredit);
            }
            break;
          }
          if (json.type === 'chunk') {
            // Tu·ª≥ ch·ªçn: n·∫øu b·∫°n b·∫≠t transform FE th√¨ x·ª≠ l√Ω ·ªü ƒë√¢y
            // const safeContent = transformLatexDelimiters?.(json.content ?? '') ?? (json.content ?? '');
            const safeContent = json.content ?? '';
            // G·ªôp + batch update
            pushAssistantChunk(updatedHistory, assistantMessageRef, safeContent);
          }
        }
        window.dispatchEvent(new Event("sessionUpdated"));
      }
    } catch (err) {
      console.error('L·ªói trong handleSubmit:', err);
      setErrorMessage('ƒê√£ x·∫£y ra l·ªói khi g·ª≠i y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.');
      setLoading(false);
    } finally {
      if (scheduleRef.current.timer) {
        clearTimeout(scheduleRef.current.timer);
        scheduleRef.current.timer = null;
        scheduleRef.current.pending = '';
      }
      setLoading(false);
    }
  }, [API_URL, chatHistory, input, loading, pushAssistantChunk, sessionId, token, remainingCredit]);

  // Markdown renderer (ƒë·∫∑t remarkMath TR∆Ø·ªöC remarkGfm)
  const Markdown = useMemo(() => {
    return function MD({ children }) {
      // N·∫øu mu·ªën lu√¥n ch·∫°y l∆∞·ªõi an to√†n FE cho LaTeX, b·∫≠t transform d∆∞·ªõi:
      // const text = transformLatexDelimiters(String(children ?? ''));
      const text = String(children ?? '');
      return (
        <ReactMarkdown
          children={text}
          remarkPlugins={[remarkMath, remarkGfm]}
          rehypePlugins={[
            rehypeHighlight,
            [rehypeKatex, { throwOnError: false, strict: false }]
          ]}
          components={{
            code({ inline, className, children: codeChildren, ...props }) {
              const isBlock = !inline && typeof codeChildren === 'object' && String(codeChildren).includes('\n');
              const lang = className || '';
              return isBlock ? (
                <div className="code-block-wrapper">
                  <div className="code-header">
                    <span className="code-lang">{getLangIcon(lang)}</span>
                    <button className="copy-button" onClick={() => handleCopy(extractText(codeChildren))}>
                      {copied ? 'ƒê√£ sao ch√©p' : 'Sao ch√©p'}
                    </button>
                  </div>
                  <pre className="code-block">
                    <code className={lang} {...props}>{codeChildren}</code>
                  </pre>
                </div>
              ) : (
                <code className="inline-code" {...props}>{codeChildren}</code>
              );
            }
          }}
        />
      );
    };
  }, [copied, handleCopy]);

  return (
    <main className="main">
      <section className="hero">
        {!token ? (
          <div className="not-logged">
            <div className="not-logged-box">
              <p className="not-logged-text">
                B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán
              </p>
              <a href="/login" className="login-btn">
                ƒêƒÉng nh·∫≠p
              </a>
            </div>
          </div>
        ) : (
          <>
            {!started && <TopIntro />}

            {errorMessage && (
              <div className="error-message">
                <p>{errorMessage}</p>
                {errorMessage.includes('h·∫øt credit') && (
                  <p>
                    <a href="/purchase-credits">Mua th√™m credit</a>
                  </p>
                )}
              </div>
            )}
            {chatHistory.map((msg, i) => (
              <div key={i} className={`chat-message ${msg.role}`}>
                <div className="message-box">
                  {msg.role === "user" ? (
                    <div className="user-message">
                      <Markdown>{msg.content}</Markdown>
                    </div>
                  ) : (
                    <>
                      <Markdown>{msg.content}</Markdown>
                      <div className="feedback-bar">
                        <button
                          className="btn-icon"
                          onClick={() => handleCopy(msg.content)}
                          title="Sao ch√©p"
                        >
                          üìã
                        </button>
                        <button
                          className="btn-icon"
                          onClick={() => alert("B·∫°n th√≠ch ph·∫£n h·ªìi n√†y!")}
                          title="Th√≠ch"
                        >
                          üëç
                        </button>
                        <button
                          className="btn-icon"
                          onClick={() => alert("B·∫°n kh√¥ng th√≠ch ph·∫£n h·ªìi n√†y!")}
                          title="Kh√¥ng th√≠ch"
                        >
                          üëé
                        </button>
                        <button
                          className="btn-icon"
                          onClick={() => speakText(msg.content)}
                          title="ƒê·ªçc to"
                        >
                          üîä
                        </button>
                      </div>
                    </>
                  )}
                </div>
              </div>
            ))}
            {loading && (
              <div className="chat-message">
                <span className="blinker">‚ñà</span>
              </div>
            )}
            <div ref={listEndRef} />
            <div className="composer-wrap">
              <div className="composer" role="group" aria-label="H·ªôp nh·∫≠p c√¢u h·ªèi">
                <textarea
                  placeholder="Nh·∫≠p c√¢u h·ªèi b·∫•t k√¨..."
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                />
                <div className="right">
                  <button
                    className="circle-btn send"
                    title="G·ª≠i"
                    onClick={handleSubmit}
                    disabled={loading || remainingCredit === 0}
                  >
                    <svg width="22" height="22" viewBox="0 0 24 24" fill="none">
                      <path
                        d="M5 12l14-7-7 14-2-5-5-2z"
                        stroke="#16a34a"
                        strokeWidth="2"
                        strokeLinejoin="round"
                      />
                    </svg>
                  </button>
                </div>
                {!!chatHistory.length && (
                  <button
                    className="circle-btn danger"
                    onClick={handleClear}
                    title="Xo√° l·ªãch s·ª≠"
                  >
                    üóëÔ∏è
                  </button>
                )}
              </div>
            </div>
            {remainingCredit === 0 && (
              <div className="credit-warning">
                <p>B·∫°n ƒë√£ h·∫øt credit, vui l√≤ng <a href="/purchase-credits">mua th√™m credit</a> ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng.</p>
              </div>
            )}

            <p className="disclaimer">
              Khi ƒë·∫∑t c√¢u h·ªèi, b·∫°n ƒë·ªìng √Ω v·ªõi{" "}
              <a href="#">ƒêi·ªÅu kho·∫£n</a> v√†{" "}
              <a href="#">Ch√≠nh s√°ch quy·ªÅn ri√™ng t∆∞</a>.
            </p>
          </>
        )}
      </section>
    </main>
  );
}

export default Home;